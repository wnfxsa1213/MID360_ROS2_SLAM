# ====================================================================
# 地图精细化工具配置文件
# ====================================================================
# 本配置文件包含地图精细化处理的所有参数，操作人员可根据实际需要调整
# 建议在修改参数前先备份原始配置文件
# 参数调整指南：数值越大通常表示效果越强，处理时间越长
# ====================================================================

# ====================================================================
# 1. 法向量ICP增强配准算法配置
# ====================================================================
# 用于提高点云配准精度的高级算法，特别适合结构化场景
normal_icp:
  # 最大迭代次数 (建议范围: 20-100)
  # 数值越大：配准精度越高，但处理时间越长
  # 数值越小：处理速度快，但可能配准不准确
  max_iterations: 50

  # 收敛阈值 (建议范围: 1e-8 到 1e-4)
  # 数值越小：配准越精确，但可能需要更多迭代
  # 数值越大：更容易收敛，但精度可能不够
  convergence_threshold: 1e-6

  # 法向量搜索半径 (建议范围: 0.05-0.2米)
  # 数值越大：考虑更多邻近点，结果更平滑
  # 数值越小：更敏感于局部特征，但可能有噪声
  normal_search_radius: 0.1

  # 法向量权重 (建议范围: 0.5-0.9)
  # 数值越大：更重视表面法向量信息
  # 数值越小：更重视点位置信息
  normal_weight: 0.7

  # 距离权重 (应与法向量权重相加等于1.0)
  # 自动计算: distance_weight = 1.0 - normal_weight
  distance_weight: 0.3

  # 角度阈值 (建议范围: 20-45度)
  # 数值越大：允许更大的法向量角度差异
  # 数值越小：要求法向量更精确对齐
  angle_threshold: 30.0

# ====================================================================
# 2. 平面结构保护算法配置
# ====================================================================
# 检测并保护墙面、地面等平面结构，防止在处理过程中被破坏
plane_preserver:
  # RANSAC平面检测距离阈值 (建议范围: 0.01-0.05米)
  # 数值越小：检测到的平面更精确，但可能遗漏粗糙表面
  # 数值越大：能检测粗糙平面，但可能误检非平面区域
  ransac_distance_threshold: 0.02

  # RANSAC最大迭代次数 (建议范围: 500-2000)
  # 数值越大：更可能找到最佳平面，但计算时间长
  # 数值越小：处理快速，但可能错过重要平面
  ransac_max_iterations: 1000

  # 平面最小点数 (建议范围: 50-200)
  # 数值越大：只保留大面积平面，忽略小平面
  # 数值越小：保留更多小平面，但可能包含噪声
  min_plane_points: 100

  # 平行阈值角度 (建议范围: 3-10度)
  # 数值越小：要求平面严格平行
  # 数值越大：允许轻微倾斜的"平行"平面
  parallel_threshold: 5.0

  # 垂直阈值角度 (建议范围: 80-89度)
  # 用于判断墙面是否垂直于地面
  # 数值越大：允许墙面有更大倾斜
  perpendicular_threshold: 85.0

# ====================================================================
# 3. 边缘特征强化算法配置
# ====================================================================
# 增强建筑物的边缘和角落特征，保持结构清晰度
edge_enhancer:
  # 曲率阈值 (建议范围: 0.05-0.2)
  # 数值越小：检测更微小的边缘变化
  # 数值越大：只检测明显的边缘特征
  curvature_threshold: 0.1

  # 边缘搜索半径 (建议范围: 0.02-0.1米)
  # 数值越大：考虑更大范围的邻近点
  # 数值越小：更精确定位边缘，但可能漏检
  edge_search_radius: 0.05

  # 边缘权重倍数 (建议范围: 1.5-3.0)
  # 数值越大：边缘增强效果越明显
  # 数值越小：保持更自然的边缘效果
  edge_weight_multiplier: 2.0

  # 线特征最小点数 (建议范围: 10-50)
  # 数值越大：只保留长直线特征
  # 数值越小：保留更多短线段特征
  line_feature_min_points: 20

# ====================================================================
# 4. 几何约束优化算法配置
# ====================================================================
# 利用建筑物几何规律进行优化，如墙面平行、垂直等约束
geometry_optimizer:
  # 是否启用平行约束 (true/false)
  # true: 强制相邻墙面保持平行关系
  # false: 不进行平行约束优化
  enable_parallel_constraint: true

  # 是否启用垂直约束 (true/false)
  # true: 强制墙面与地面保持垂直
  # false: 允许墙面有倾斜
  enable_perpendicular_constraint: true

  # 是否启用距离约束 (true/false)
  # true: 基于标准房间尺寸进行约束
  # false: 不进行距离约束
  enable_distance_constraint: true

  # 是否启用角度约束 (true/false)
  # true: 强制墙面夹角为90度倍数
  # false: 允许任意角度
  enable_angle_constraint: true

  # 约束权重 (建议范围: 0.1-0.8)
  # 数值越大：几何约束影响越强，但可能过度规整化
  # 数值越小：保持更多原始几何特征
  constraint_weight: 0.5

# ====================================================================
# 5. 点云去噪算法配置
# ====================================================================
# 移除点云中的噪声点，提高数据质量
noise_reduction:
  # 统计异常值去除
  statistical_outlier:
    # 邻近点数量 (建议范围: 10-50)
    # 数值越大：判断更准确，但计算时间长
    # 数值越小：处理快速，但可能误判
    mean_k: 20

    # 标准差倍数阈值 (建议范围: 1.0-3.0)
    # 数值越小：去噪越严格，可能移除有用点
    # 数值越大：保留更多点，但可能留下噪声
    std_dev_mul_thresh: 2.0

  # 半径异常值去除
  radius_outlier:
    # 搜索半径 (建议范围: 0.1-0.5米)
    # 数值越大：在更大范围内搜索邻近点
    # 数值越小：更严格的邻近点要求
    radius: 0.3

    # 最小邻近点数 (建议范围: 2-10)
    # 数值越大：要求更多邻近点，去噪更严格
    # 数值越小：保留更多孤立点
    min_neighbors: 3

  # 密度过滤
  density_filter:
    # 最小点密度 (建议范围: 5-50 点/立方米)
    # 数值越大：只保留高密度区域
    # 数值越小：保留更多稀疏区域
    min_density: 10

  # 自适应噪声去除配置 (新增)
  adaptive_denoising:
    # 去噪模式选择 (conservative/balanced/aggressive)
    # conservative: 保守模式，只移除明显噪声，保留更多细节
    # balanced: 平衡模式，在质量和完整性间平衡(推荐)
    # aggressive: 激进模式，严格去噪，可能移除部分细节
    mode: "conservative"

    # 噪声分数权重配置 (仅在需要精细调整时修改)
    # 权重总和应该在0.6-1.0之间，过大可能导致过度去噪
    feature_weights:
      # 曲率权重 (建议范围: 0.1-0.3)
      # 高曲率区域通常是边缘或噪声
      curvature: 0.2

      # 法向量变化权重 (建议范围: 0.2-0.4)
      # 法向量剧烈变化通常表示噪声或边缘
      normal_variation: 0.3

      # 密度权重 (建议范围: 0.1-0.3)
      # 低密度区域可能是噪声，但也可能是重要的稀疏特征
      density: 0.2

    # 阈值计算方法 (percentile/otsu/hybrid)
    # percentile: 使用百分位数，更保守
    # otsu: 使用OTSU自动阈值，适应性强但可能激进
    # hybrid: 混合方法，取两者中更保守的(推荐)
    threshold_method: "hybrid"

    # 百分位数阈值 (当使用percentile或hybrid方法时)
    # 建议范围: 75-95，数值越大去噪越保守
    # 85表示只移除噪声分数最高的15%的点
    noise_percentile: 85

# ====================================================================
# 6. 表面重建算法配置
# ====================================================================
# 从点云重建连续表面，填补空洞
surface_reconstruction:
  # 重建方法选择
  # "poisson": 泊松重建(推荐) - 适合大多数场景
  # "marching_cubes": 行进立方体 - 适合体素化数据
  # "ball_pivoting": 球旋转 - 适合高密度点云
  method: "poisson"

  # 泊松重建深度 (建议范围: 7-12)
  # 数值越大：重建越精细，但计算量大
  # 数值越小：重建较粗糙，但速度快
  poisson_depth: 9

  # 泊松重建宽度 (通常设为0，自动计算)
  # 0: 自动计算最佳宽度
  # 其他值: 手动指定宽度
  poisson_width: 0

  # 泊松重建缩放 (建议范围: 1.0-1.5)
  # 数值越大：重建表面更平滑
  # 数值越小：更贴近原始点云
  poisson_scale: 1.1

# ====================================================================
# 7. 细节保护算法配置
# ====================================================================
# 在处理过程中保护重要的几何细节
detail_preservation:
  # 多尺度层级数 (建议范围: 2-5)
  # 数值越大：保护更多层次的细节，但计算复杂
  # 数值越小：简化处理，但可能丢失细节
  multi_scale_levels: 3

  # 边缘敏感度 (建议范围: 0.5-1.0)
  # 数值越大：更敏感保护边缘特征
  # 数值越小：允许更多边缘平滑
  edge_sensitivity: 0.8

  # 是否启用纹理增强 (true/false)
  # true: 保护表面纹理细节
  # false: 平滑处理，去除纹理噪声
  texture_enhancement: true

# ====================================================================
# 8. 密度均匀化算法配置
# ====================================================================
# 使点云密度分布更均匀，改善数据质量
density_uniformization:
  # 目标点密度 (建议范围: 50-200 点/立方米)
  # 数值越大：点云越密集，细节越丰富
  # 数值越小：点云较稀疏，处理速度快
  target_density: 100

  # 是否启用自适应采样 (true/false)
  # true: 根据局部特征调整采样密度
  # false: 使用固定采样密度
  adaptive_sampling: true

  # 是否填补空洞 (true/false)
  # true: 自动填补点云中的空洞
  # false: 保持原始空洞结构
  hole_filling: true

  # 插值方法选择
  # "linear": 线性插值 - 速度快，适合简单场景
  # "cubic": 三次插值 - 质量高，适合复杂场景
  # "nearest": 最近邻 - 保持原始特征
  interpolation_method: "linear"

  # 密度计算模式
  # kd_tree：共享KDTree并并行查询（默认，精确但较慢）
  # voxel：先体素聚合后近似回映射，速度最快精度略低
  # hybrid：使用 Open3D KDTreeFlann + Hybrid 搜索
  # gpu：使用 CuPy + cuML（需安装CUDA依赖）
  mode: "kd_tree"

  # 体素模式参数：voxel_size = radius / voxel_density_downsample
  voxel_density_downsample: 2.0

  # 体素邻域平滑层数（0=只使用当前体素，1=3x3x3）
  voxel_neighbor_levels: 0

  # Hybrid 模式参数：最大邻点数量和半径缩放
  hybrid_knn: 64
  hybrid_radius_scale: 1.0

  # 是否在可用时启用GPU密度计算
  use_gpu: false

# ====================================================================
# 9. 输出控制配置
# ====================================================================
# 控制处理结果的输出格式和内容
output:
  # 是否保存中间处理结果 (true/false)
  # true: 保存每个处理步骤的结果，便于调试
  # false: 只保存最终结果，节省存储空间
  save_intermediate_results: true

  # 是否生成质量评估报告 (true/false)
  # true: 生成详细的处理质量分析报告
  # false: 不生成报告，加快处理速度
  quality_report: true

  # 是否启用可视化 (true/false)
  # true: 生成可视化图表和对比图
  # false: 纯数据处理，不生成图像
  visualization: true

# ====================================================================
# 10. 性能优化配置
# ====================================================================
# 控制处理性能和资源使用 - 支持多线程并行处理优化
performance: 
  # 处理线程数 (建议范围: 2-8)
  # 数值越大：并行处理更快，但占用更多CPU
  # 数值越小：减少CPU占用，但处理较慢
  # 建议设置为CPU核心数的50-75%
  #
  # 多线程优化效果：
  # - 曲率计算：2-4倍加速
  # - 法向量变化计算：2-3倍加速
  # - 密度计算：3-5倍加速
  # - 总体处理：1.5-3倍加速
  num_threads: 16

  # 内存限制 (单位: GB，建议范围: 4-16)
  # 数值越大：可处理更大的点云文件
  # 数值越小：减少内存占用，但可能处理失败
  # 建议设置为系统可用内存的50-70%
  memory_limit_gb: 16

  # 是否显示处理进度 (true/false)
  # true: 显示详细处理进度信息，包含多线程性能统计和进度条
  # false: 静默处理，不显示进度
  progress_display: true

  # 进度条配置
  progress_bar:
    # 是否使用彩色进度条 (如果tqdm可用)
    use_tqdm: true
    # 进度条刷新频率 (秒)
    refresh_rate: 0.1
    # 是否显示嵌套进度条
    show_nested: true

  # 多线程优化策略
  # "auto": 自动选择最佳策略（推荐）
  # "thread": 偏向线程池优化
  # "process": 偏向进程池优化（CPU密集型）
  optimization_strategy: "auto"
